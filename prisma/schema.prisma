// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now()) // Timestamp of when the user account was created
  updatedAt     DateTime @updatedAt // Timestamp of the last update to the user's information

  sessions Session[] // One-to-many relationship with sessions
  Account  Account[]
  Book     Book[]

  @@map("users") // Map to the "users" table in the database
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.VarChar(255)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique @db.VarChar(255) // Unique token
  expires    DateTime

  @@map("verifications")
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  description     String?
  language        String
  publicationYear Int?
  isbn            String?
  publisher       String?
  uploadedAt      DateTime @default(now())
  coverPublicId   String
  bookUrl         String
  coverImage      String?
  uploaderId      String // Foreign key to User
  uploader        User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("books")
}
