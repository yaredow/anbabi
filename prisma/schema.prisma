// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  FAVORITE
  TO_READ
  CURRENTLY_READING
  COMPLETED
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Book          Book[]
  Collection    Collection[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String @id @default(cuid())
  identifier String
  value      String

  expiresAt DateTime
  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Book {
  id               String             @id @default(cuid())
  title            String
  author           String
  description      String?
  language         String
  publicationYear  Int?
  isbn             String?
  publisher        String?
  uploadedAt       DateTime           @default(now())
  coverPublicId    String
  bookUrl          String
  coverImage       String?
  categories       String[]
  pageCount        Int?
  status           StatusType         @default(TO_READ)
  uploaderId       String
  uploader         User               @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  collections      Collection[]       @relation("BookCollections")
  BookOnCollection BookOnCollection[]

  @@map("books")
}

model Collection {
  id               String             @id @default(cuid()) // Unique identifier for each collection
  name             String
  description      String?
  userId           String
  image            String?
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  books            Book[]             @relation("BookCollections") // Relation to the Book model (many-to-many)
  BookOnCollection BookOnCollection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collections")
}

model BookOnCollection {
  id           String   @id @default(cuid())
  bookId       String
  collectionId String
  createdAt    DateTime @default(now())

  book       Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([bookId, collectionId]) // Ensures a book can only appear once per collection
}
